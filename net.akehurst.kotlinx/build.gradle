/**
 * Copyright (C) 2019 Dr. David H. Akehurst (http://dr.david.h.akehurst.net)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()       // for com.android.tools.build
        maven {
            name "kotlin-eap"
            url "https://dl.bintray.com/kotlin/kotlin-eap/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
//        classpath "com.android.tools.build:gradle:$version_abt"   // for com.android.application
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
//        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6"
        classpath "com.moowork.gradle:gradle-node-plugin:$version_moowork"
    }
}

def getPassword(String currentUser, String location) {
	if (project.hasProperty('maclocal')) {
		println("Getting password using local mac login credentials")
		def stdout = new ByteArrayOutputStream()
		def stderr = new ByteArrayOutputStream()
		exec {
			commandLine 'security', '-q', 'find-internet-password', '-a', currentUser, '-s', location, '-w'
			standardOutput = stdout
			errorOutput = stderr
			ignoreExitValue true
		}
		//noinspection GroovyAssignabilityCheck
		stdout.toString().trim()
	}
}

subprojects {

    apply plugin: "org.jetbrains.kotlin.multiplatform"
	apply plugin: 'maven-publish'
    apply plugin: 'com.moowork.node'

	group = "${rootProject.name}"
	version = "${version_project}"

    buildDir = new File(rootProject.projectDir, ".gradle_build/" + project.name)

    
	repositories {
    	mavenLocal()
	    mavenCentral()
	    jcenter()

		maven {
			name 'kotlinx'
			url "https://kotlin.bintray.com/kotlinx"
		}
		maven {
			name "soywiz"
			url "https://dl.bintray.com/soywiz/soywiz"
		}
        maven {
            name "kotlin-eap"
            url "https://dl.bintray.com/kotlin/kotlin-eap/"
        }
	}


    kotlin {
        targets {
            jvm('jvm8') {
                compilations.all {
                    tasks[compileKotlinTaskName].kotlinOptions {
                        jvmTarget = '1.8'
                    }
                }
            }
            js('js') {
                compilations.all {
                    tasks[compileKotlinTaskName].kotlinOptions {
                        moduleKind = 'plain'
                    }
                }
            }
            macosX64('macosX64')
        }

        publishing {
            repositories {
                if (project.hasProperty('publishurl')) {
                    maven {
                        url project.property('publishurl')
                        credentials {
                            username = project.hasProperty('username') ? project.property('username') : System.getenv('USER')
                            password = project.hasProperty('password') ? project.property('password') : (project.hasProperty('maclocal') ? getPassword(System.getenv('USER'), "projects.itemis.de")  : System.getenv('PASSWORD') )
                        }
                    }
                }
            }
        }
    }
	
    dependencies {
        commonMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-common:${version_kotlin}"
        commonTestImplementation "org.jetbrains.kotlin:kotlin-test-common:${version_kotlin}"
        commonTestImplementation"org.jetbrains.kotlin:kotlin-test-annotations-common:${version_kotlin}"

        jvm8MainImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${version_kotlin}"
//        jvm8MainImplementation "org.jetbrains.kotlin:kotlin-reflect:${version_kotlin}"
        jvm8TestImplementation "org.jetbrains.kotlin:kotlin-test:${version_kotlin}"
        jvm8TestImplementation"org.jetbrains.kotlin:kotlin-test-junit:${version_kotlin}"

        jsMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-js:${version_kotlin}"
        jsTestImplementation "org.jetbrains.kotlin:kotlin-test-js:${version_kotlin}"
    }

    task populateNodeModules(type: Copy, dependsOn: compileKotlinJs) {
        from compileKotlinJs.destinationDir

        configurations.jsTestCompile.each {
            from zipTree(it.absolutePath).matching { include '*.js' }
        }

        into "${buildDir}/node_modules"
    }

    node {
        download = true
    }

    task installMocha(type: NpmTask) {
        args = ['install', 'mocha']
    }

    task runMocha(type: NodeTask, dependsOn: [compileTestKotlinJs, populateNodeModules, installMocha]) {
        script = file('node_modules/mocha/bin/mocha')
        args = [compileTestKotlinJs.outputFile]
    }

    jsTest.dependsOn runMocha


    /*
	bintray {
		user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
		key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
		publications = ['mavenJava']
		pkg {
			repo = 'maven'
			name = 'net.akehurst.kotlinx'
			userOrg = user
			licenses = ['Apache-2.0']
			vcsUrl = 'https://github.com/dhakehurst/net.akehurst.kotlinx.git'
			version {
				name = "${project.version}"
				gpg {
                    sign = true
                    passphrase = project.hasProperty('passphrase') ? project.property('passphrase') : System.getenv('BINTRAY_PASSPHRASE')
                }
			}
		}
	}
	*/
    
}
